
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

/ {
  behaviors {
    #include "macros.dtsi"
    #include "version.dtsi"

    hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick_tap_ms = <175>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };
  };

    keymap {
        compatible = "zmk,keymap";


        default_layer {
            bindings = <
 &kp EQUAL     &kp N1     &kp N2    &kp N3     &kp N4  &kp N5               &tog 1                                                                &mo 3  &kp N6  &kp N7    &kp N8    &kp N9    &kp N0   &kp BSLH
   &kp TAB    &kp SQT  &kp COMMA   &kp DOT      &kp P   &kp Y                &none                                                                &none   &kp F   &kp G     &kp C     &kp R     &kp L   &kp FSLH
 &kp ENTER      &kp A      &kp O     &kp E      &kp U   &kp I                &none  &kp LGUI   &kp LALT                   &kp LALT  &kp RGUI      &none   &kp D   &kp H     &kp T     &kp N     &kp S  &kp MINUS
  &kp BSPC   &kp SEMI      &kp Q     &kp J      &kp K   &kp X                                 &kp LCTRL                  &kp RCTRL                        &kp B   &kp M     &kp W     &kp V     &kp Z    &kp DEL
     &mo 2  &kp GRAVE    &kp ESC  &kp LEFT  &kp RIGHT                    &kp SPACE     &mo 4    &kp ESC                  &kp GLOBE     &mo 5  &kp SPACE          &kp UP  &kp DOWN  &kp LBKT  &kp RBKT      &mo 2
            >;
        };

        layer_keypad {
            bindings = <
 &kp EQUAL     &kp N1    &kp N2    &kp N3     &kp N4  &kp N5              &trans                                                                 &mo 3  &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
   &kp TAB      &kp Q     &kp W     &kp E      &kp R   &kp T               &none                                                                 &none   &kp Y   &kp KP_N7     &kp KP_N8      &kp KP_N9     &kp KP_MINUS   &kp BSLH
   &kp ESC      &kp A     &kp S     &kp D      &kp F   &kp G               &none  &kp LCTRL  &kp LALT                   &kp LGUI  &kp RCTRL      &none   &kp H   &kp KP_N4     &kp KP_N5      &kp KP_N6      &kp KP_PLUS    &kp SQT
 &kp LSHFT      &kp Z     &kp X     &kp C      &kp V   &kp B                                 &kp HOME                  &kp PG_UP                         &kp N   &kp KP_N1     &kp KP_N2      &kp KP_N3     &kp KP_ENTER  &kp RSHFT
     &mo 2  &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT                    &kp BSPC    &kp DEL   &kp END                  &kp PG_DN  &kp ENTER  &kp KP_N0              &kp UP      &kp DOWN     &kp KP_DOT         &kp RBKT      &mo 2
            >;
        };

        layer_fn {
            bindings = <
 &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6            &tog 1                                                   &mo 3  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
 &trans  &trans  &trans  &trans  &trans  &trans             &none                                                   &none  &trans  &trans  &trans   &trans   &trans   &trans
 &trans  &trans  &trans  &trans  &trans  &trans             &none  &trans  &trans                  &trans  &trans   &none  &trans  &trans  &trans   &trans   &trans   &trans
 &trans  &trans  &trans  &trans  &trans  &trans                            &trans                  &trans                  &trans  &trans  &trans   &trans   &trans   &trans
 &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans                  &trans  &trans  &trans          &trans  &trans   &trans   &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
  &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                  &none                                                                          &trans   &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none         &none            &bootloader                                                                     &bootloader   &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none         &none                  &none   &none   &none                  &bt BT_CLR       &none  &rgb_ug RGB_MEFS_CMD 5   &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none    &macro_ver         &none                                  &none                       &none                                       &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none                                &none   &none   &none                       &none  &bl BL_TOG         &rgb_ug RGB_TOG          &bl BL_INC  &bl BL_DEC   &none   &none   &none
            >;
        };

        layer_ls {
            bindings = <
        &trans         &trans        &trans        &trans         &trans      &trans                   &trans                                                                                   &trans     &trans      &trans        &trans     &trans     &trans         &trans
   &kp LS(TAB)         &kp N1        &kp N2        &kp N3         &kp N4      &kp N5                   &trans                                                                                   &trans  &kp LS(F)   &kp LS(G)     &kp LS(C)  &kp LS(R)  &kp LS(L)   &kp LS(FSLH)
 &kp LS(ENTER)  &kp RS(EQUAL)  &kp RS(LBKT)      &kp LBKT     &kp RS(N9)  &kp RS(N8)                   &trans  &kp LS(LGUI)   &kp LS(LALT)                   &kp LS(RALT)  &kp LS(RGUI)         &trans  &kp LS(D)   &kp LS(H)     &kp LS(T)  &kp LS(N)  &kp LS(S)  &kp LS(MINUS)
  &kp LS(BSPC)  &kp RS(GRAVE)    &kp RS(N4)    &kp RS(N7)     &kp RS(N5)      &trans                                         &kp LS(LCTRL)                  &kp LS(RCTRL)                               &kp LS(B)   &kp LS(M)     &kp LS(W)  &kp LS(V)  &kp LS(Z)    &kp LS(DEL)
        &trans         &trans        &trans  &kp LS(LEFT)  &kp LS(RIGHT)                        &kp LS(SPACE)        &trans         &trans                         &trans        &trans  &kp LS(SPACE)             &kp LS(UP)  &kp LS(DOWN)     &trans     &trans         &trans
            >;
        };

        layer_rs {
            bindings = <
        &trans        &trans         &trans        &trans         &trans     &trans                   &trans                                                                                   &trans        &trans      &trans        &trans        &trans     &trans       &trans
   &kp RS(TAB)   &kp RS(SQT)  &kp RS(COMMA)   &kp RS(DOT)      &kp RS(P)  &kp RS(Y)                   &trans                                                                                   &trans        &kp N6      &kp N7        &kp N8        &kp N9     &kp N0       &trans
 &kp RS(ENTER)     &kp RS(A)      &kp RS(O)     &kp RS(E)      &kp RS(U)  &kp RS(I)                   &trans  &kp RS(LGUI)   &kp RS(LALT)                   &kp RS(RALT)  &kp RS(RGUI)         &trans  &kp LS(BSLH)  &kp LS(N0)      &kp RBKT  &kp LS(RBKT)  &kp EQUAL   &kp RS(N1)
  &kp RS(BSPC)  &kp RS(SEMI)      &kp RS(Q)     &kp RS(J)      &kp RS(K)  &kp RS(X)                                         &kp RS(LCTRL)                  &kp RS(RCTRL)                                 &kp LS(N6)  &kp LS(N3)      &kp BSLH    &kp LS(N2)  &kp GRAVE  &kp RS(DEL)
        &trans        &trans         &trans  &kp RS(LEFT)  &kp RS(RIGHT)                       &kp RS(SPACE)        &trans         &trans                         &trans        &trans  &kp RS(SPACE)                &kp RS(UP)  &kp RS(DOWN)        &trans     &trans       &trans
            >;
        };

    };
};
